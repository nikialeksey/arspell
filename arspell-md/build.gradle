apply plugin: 'java-library'
apply plugin: 'kotlin'
apply from: '../gradle/jacoco.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation project(':arspell')
    implementation 'com.vladsch.flexmark:flexmark:0.61.24'
    implementation 'com.vladsch.flexmark:flexmark-profile-pegdown:0.61.24'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    testImplementation project(':arspell-hunspell')
}

ext {
    bintrayName = 'arspell-md'
    artifact = 'arspell-md'
    libraryName = 'arspell-md'
}
if (project.rootProject.file('local.properties').exists()) {
    Properties properties = new Properties()
    properties.load(
            project.rootProject.file('local.properties').newDataInputStream()
    )

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        repositories {
            maven {
                name = 'central'
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username properties.getProperty("sonatype.user")
                    password properties.getProperty("sonatype.pass")
                }
            }
        }

        publications {
            arspell_md(MavenPublication) {
                from components.java

                groupId publishedGroupId
                artifactId artifact
                version libraryVersion

                pom {
                    name = libraryName
                    description = libraryDescription
                    url = siteUrl

                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                }
            }
        }
    }

    def signingKeyId = properties.getProperty("signingKeyId")
    def signingKey = new File(properties.getProperty("signingKey")).text
    def signingPassword = properties.getProperty("signingPassword")
    signing {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign(publishing.publications.arspell_md)
    }

    nexusStaging {
        serverUrl = "https://oss.sonatype.org/service/local/"
        username = properties.getProperty("sonatype.user")
        password = properties.getProperty("sonatype.pass")
        packageGroup = publishedGroupId
    }
}
